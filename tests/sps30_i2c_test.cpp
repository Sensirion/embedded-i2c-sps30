/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * Generator:     sensirion-driver-generator 1.3.3
 * Product:       sps30
 * Model-Version: 1.0.0
 */

#include "sensirion_common.h"
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"
#include "sensirion_test_setup.h"
#include "sps30_i2c.h"
#include <inttypes.h>
#include <stdio.h>

#define sensirion_hal_sleep_us sensirion_i2c_hal_sleep_usec

TEST_GROUP (SPS30_Tests) {
    void setup() {
        sps30_init(0x69);
    }
};

TEST (SPS30_Tests, test_start_measurement1) {
    int16_t local_error = 0;
    uint16_t data_ready_flag = 0;
    uint16_t mc_1p0 = 0;
    uint16_t mc_2p5 = 0;
    uint16_t mc_4p0 = 0;
    uint16_t mc_10p0 = 0;
    uint16_t nc_0p5 = 0;
    uint16_t nc_1p0 = 0;
    uint16_t nc_2p5 = 0;
    uint16_t nc_4p0 = 0;
    uint16_t nc_10p0 = 0;
    uint16_t typical_particle_size = 0;
    uint32_t auto_cleaning_interval = 0;
    int8_t product_type[8] = {0};
    int8_t serial_number[32] = {0};
    uint8_t major_version = 0;
    uint8_t minor_version = 0;
    uint32_t device_status = 0;
    local_error = sps30_start_measurement((sps30_output_format)(1280));
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_measurement");
    local_error = sps30_read_data_ready_flag(&data_ready_flag);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_data_ready_flag");
    printf("data_ready_flag: %u\n", data_ready_flag);
    local_error = sps30_read_measurement_values_uint16(
        &mc_1p0, &mc_2p5, &mc_4p0, &mc_10p0, &nc_0p5, &nc_1p0, &nc_2p5, &nc_4p0,
        &nc_10p0, &typical_particle_size);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement_values_uint16");
    printf("mc_1p0: %u ", mc_1p0);
    printf("mc_2p5: %u ", mc_2p5);
    printf("mc_4p0: %u ", mc_4p0);
    printf("mc_10p0: %u ", mc_10p0);
    printf("nc_0p5: %u ", nc_0p5);
    printf("nc_1p0: %u ", nc_1p0);
    printf("nc_2p5: %u ", nc_2p5);
    printf("nc_4p0: %u ", nc_4p0);
    printf("nc_10p0: %u ", nc_10p0);
    printf("typical_particle_size: %u\n", typical_particle_size);
    local_error = sps30_start_fan_cleaning();
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_fan_cleaning");
    local_error = sps30_read_auto_cleaning_interval(&auto_cleaning_interval);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_auto_cleaning_interval");
    printf("auto_cleaning_interval: %u\n", auto_cleaning_interval);
    local_error = sps30_write_auto_cleaning_interval(604800);
    CHECK_EQUAL_ZERO_TEXT(local_error, "write_auto_cleaning_interval");
    local_error = sps30_read_product_type(product_type, 8);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_product_type");
    printf("product_type: %s\n", product_type);
    local_error = sps30_read_serial_number(serial_number, 32);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_serial_number");
    printf("serial_number: %s\n", serial_number);
    local_error = sps30_read_firmware_version(&major_version, &minor_version);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_firmware_version");
    printf("major_version: %u ", major_version);
    printf("minor_version: %u\n", minor_version);
    local_error = sps30_read_device_status_register(&device_status);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_device_status_register");
    printf("device_status: %u\n", device_status);
    local_error = sps30_clear_device_status_register();
    CHECK_EQUAL_ZERO_TEXT(local_error, "clear_device_status_register");
    local_error = sps30_stop_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_measurement");
}

TEST (SPS30_Tests, test_sleep1) {
    int16_t local_error = 0;
    local_error = sps30_sleep();
    CHECK_EQUAL_ZERO_TEXT(local_error, "sleep");
    local_error = sps30_wake_up_sequence();
    CHECK_EQUAL_ZERO_TEXT(local_error, "wake_up_sequence");
}

TEST (SPS30_Tests, test_read_auto_cleaning_interval1) {
    int16_t local_error = 0;
    uint32_t auto_cleaning_interval = 0;
    local_error = sps30_read_auto_cleaning_interval(&auto_cleaning_interval);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_auto_cleaning_interval");
    printf("auto_cleaning_interval: %u\n", auto_cleaning_interval);
}

TEST (SPS30_Tests, test_write_auto_cleaning_interval1) {
    int16_t local_error = 0;
    local_error = sps30_write_auto_cleaning_interval(604800);
    CHECK_EQUAL_ZERO_TEXT(local_error, "write_auto_cleaning_interval");
}

TEST (SPS30_Tests, test_read_product_type1) {
    int16_t local_error = 0;
    int8_t product_type[8] = {0};
    local_error = sps30_read_product_type(product_type, 8);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_product_type");
    printf("product_type: %s\n", product_type);
}

TEST (SPS30_Tests, test_read_serial_number1) {
    int16_t local_error = 0;
    int8_t serial_number[32] = {0};
    local_error = sps30_read_serial_number(serial_number, 32);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_serial_number");
    printf("serial_number: %s\n", serial_number);
}

TEST (SPS30_Tests, test_read_firmware_version1) {
    int16_t local_error = 0;
    uint8_t major_version = 0;
    uint8_t minor_version = 0;
    local_error = sps30_read_firmware_version(&major_version, &minor_version);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_firmware_version");
    printf("major_version: %u ", major_version);
    printf("minor_version: %u\n", minor_version);
}

TEST (SPS30_Tests, test_read_device_status_register1) {
    int16_t local_error = 0;
    uint32_t device_status = 0;
    local_error = sps30_read_device_status_register(&device_status);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_device_status_register");
    printf("device_status: %u\n", device_status);
}

TEST (SPS30_Tests, test_clear_device_status_register1) {
    int16_t local_error = 0;
    local_error = sps30_clear_device_status_register();
    CHECK_EQUAL_ZERO_TEXT(local_error, "clear_device_status_register");
}

TEST (SPS30_Tests, test_device_reset1) {
    int16_t local_error = 0;
    local_error = sps30_device_reset();
    CHECK_EQUAL_ZERO_TEXT(local_error, "device_reset");
}
